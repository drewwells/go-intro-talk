Intro to Go
May 2018

Drew Wells
Oracle Cloud Infrastructure
Principal Member of Technical Staff
drew.wells00@gmail.com

* What is go?

Object Oriented
Garbage collection
Pragmatic
Small Language
Concurrency
.image usergroups.png

: Structurally typed - enables interfaces
: Language kept purposely small all founders had to give thumbs up to include a feature
: Goroutines, channels
* file.go dissected

    // Package main declares the name of this package
    package main

    // Import lists any dependent packages required to build
    // this file
    import "fmt"

    var MyString string // exported global variable

    var (
        MyOtherString string
    )

    // main tells the compiler how to start your program and
    // when to exit
    func main() {

        var text string = "Welcome to Go"
        otherText := "Welcome to Go"
        otherText = "Reassignment"
    }

: Exported types are defined by their casing
: encapsulation with casing
: One of my favorite things about Go

* Encapsulation

.code -edit oo/main.go


* Hello World

.play -edit starter.go

: package main means func main() is required
: main is executed after variable, func initialization and any init() containers are run
: variable assignment :=

* Interfaces

.play -edit interface/main.go

: Anything that implements ServeHTTP can act as an http.Handler

* Enforce Interfaces

.play -edit enforce/main.go

.link https://golang.org/pkg/fmt/#Stringer

* Using interfaces

.code -edit simpleserver/main.go

* JSON

.play -edit jsonencoding/main.go /^func main/,/^}/

* Time parsing

.play -edit time/main.go


* Go tools

- go build
- go run
- go install

: all included in the go binary
: build packages, run individual go files
: install builds the package and installs it to $GOPATH/bin

* go get

    -> % go get -v -u golang.org/x/tools/cmd/present 2>&1 >/dev/null | grep Fetching

    Fetching https://golang.org/x/tools/cmd/present?go-get=1
    Fetching https://golang.org/x/tools?go-get=1
    Fetching https://golang.org/x/tools/godoc/static?go-get=1
    Fetching https://golang.org/x/tools/playground/socket?go-get=1
    Fetching https://golang.org/x/net/websocket?go-get=1
    Fetching https://golang.org/x/net?go-get=1
    Fetching https://golang.org/x/tools/present?go-get=1


* go doc


    // ListenAndServe listens on the TCP network address addr
    // and then calls Serve with handler to handle requests
    // on incoming connections.
    // Accepted connections are configured to enable TCP keep-alives.
    // Handler is typically nil, in which case the DefaultServeMux is
    // used.
    //
    // ListenAndServe always returns a non-nil error.
    func ListenAndServe(addr string, handler Handler) error {
    	server := &Server{Addr: addr, Handler: handler}
    	return server.ListenAndServe()
    }

.link https://godoc.org/net/http#ListenAndServe

or host locally with `godoc -http=:6060`
.link http://localhost:6060/pkg/net/http/#ListenAndServe

: No prescribed format
: docs live next to code
: docs hosted on godoc.org


* testing


* Using testable examples

.code -edit doc/print4.go

    -> % go test doc_test.go -v
    === RUN   ExamplePrint4
    --- PASS: ExamplePrint4 (0.00s)
    PASS

* gofmt

- consistent formatting of code
- widely used
- no work time lost discussing tabs vs spaces

.image accident.gif 400 _

: can easily scan any Go file
: entire team uses it, since it's easily integreated into most IDEs
: CI can enforce it if desired

* benchmarks

.code -edit benchmark_test.go

    -> % go test -bench=. benchmark_test.go
    goos: darwin
    goarch: amd64
    BenchmarkHello-8        20000000                58.3 ns/op
    PASS
    ok      command-line-arguments  1.242s

* Benefits of Go

- Single binary
- Standard tools go test, go build
- complete TLS and HTTP2 implementation
- gRPC

: Testing is very easy
: Compile times are fast
: gRPC excellent for microservice design

* More Reading

.link https://github.com/golang/example
.link https://golang.org/ref/spec